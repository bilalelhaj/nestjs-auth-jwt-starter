// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  firstName String @db.VarChar(255)
  lastName  String @db.VarChar(255)
  email     String @unique @db.VarChar(255)
  password  String @db.VarChar(255)

  hashedRt String?

  userRoles    UserRole[]     @relation("UserUserRole")
  UserUserRole UserUserRole[]

  students    Student[]     @relation("UserStudent")
  UserStudent UserStudent[]

  lessons Lesson[]

  @@map("Users")
}

model UserRole {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  name String @db.VarChar(255)

  users User[] @relation("UserUserRole")

  appPermissions        AppPermission[]         @relation("AppPermissionUserRole")
  UserUserRole          UserUserRole[]
  AppPermissionUserRole AppPermissionUserRole[]

  @@map("UserRoles")
}

model UserUserRole {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  userRoleId Int
  userId     Int

  userRole UserRole @relation(fields: [userRoleId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_userRole")
}

model AppPermission {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  name String @db.VarChar(255)

  userRoles             UserRole[]              @relation("AppPermissionUserRole")
  AppPermissionUserRole AppPermissionUserRole[]
}

model AppPermissionUserRole {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  userRoleId      Int
  appPermissionId Int

  userRole      UserRole      @relation(fields: [userRoleId], references: [id], onDelete: Cascade)
  appPermission AppPermission @relation(fields: [appPermissionId], references: [id], onDelete: Cascade)

  @@map("appPermission_userRole")
}

model Student {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  name                 String   @db.VarChar(255)
  birthdayAt           DateTime @db.Timestamptz()
  emergencyPhone       String   @db.VarChar(255)
  emergencyContactName String   @db.VarChar(255)
  age                  Int

  users       User[]        @relation("UserStudent")
  UserStudent UserStudent[]

  lessons       Lesson[]        @relation("lessonStudent")
  lessonStudent lessonStudent[]

  studentPayments StudentPayment[]
  StudentAddress  StudentAddress[]

  @@map("Students")
}

model UserStudent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  userId    Int
  studentId Int

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("user_student")
}

model Lesson {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  name String @db.VarChar(255)

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  students      Student[]       @relation("lessonStudent")
  lessonStudent lessonStudent[]

  @@map("Lessons")
}

model lessonStudent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  startAt DateTime @db.Timestamptz()
  endAt   DateTime @db.Timestamptz()

  studentId Int
  lessonId  Int

  student Student @relation(fields: [studentId], references: [id])
  lesson  Lesson  @relation(fields: [lessonId], references: [id])

  @@map("lesson_student")
}

// model LessonPresence {
//   id        Int   @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//
//   lessonId @relations()
//   studentId
//
//   @@map("LessonPresences")
// }

model StudentPayment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  student     Student  @relation(fields: [studentId], references: [id])
  studentId   Int
  amountEur   Float
  paidAt      DateTime @db.Timestamptz()
  payableType String   @db.VarChar(255)
  payableId   Int
  note        String?  @db.VarChar(255)

  @@map("StudentPayments")
}

model StudentAddress {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  address1 String  @db.VarChar(255)
  address2 String? @db.VarChar(255)
  zip      Int
  city     String  @db.VarChar(255)

  student   Student @relation(fields: [studentId], references: [id])
  studentId Int

  // country   Country @relation(fields: [countryId], references: [id])
  // countryId Int
  @@map("StudentAddresses")
}

// TODO: Mehrere User k√∂nnen mehrere Lessons managen
